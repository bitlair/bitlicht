Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                              ATmegaBOOT.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                              ATmegaBOOT.o (__do_clear_bss)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
                              ATmegaBOOT.o (__eerd_byte_m8)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eewr_byte_atmega8.o)
                              ATmegaBOOT.o (__eewr_byte_m8)

Allocating common symbols
Common symbol       size              file

address             0x2               ATmegaBOOT.o
buff                0x100             ATmegaBOOT.o
length              0x2               ATmegaBOOT.o
i                   0x1               ATmegaBOOT.o
flags               0x1               ATmegaBOOT.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
Address of section .text set to 0x1c00
LOAD ATmegaBOOT.o
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00001c00      0x3e6
 *(.vectors)
 .vectors       0x00001c00       0x26 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x00001c00                __vectors
                0x00001c00                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00001c26                . = ALIGN (0x2)
                0x00001c26                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00001c26        0x0 linker stubs
 *(.trampolines*)
                0x00001c26                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00001c26                __ctors_start = .
 *(.ctors)
                0x00001c26                __ctors_end = .
                0x00001c26                __dtors_start = .
 *(.dtors)
                0x00001c26                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00001c26        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x00001c26                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00001c26        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00001c32       0x16 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
                0x00001c32                __do_copy_data
 .init4         0x00001c48       0x10 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x00001c48                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00001c58        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x00001c5c        0x2 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
                0x00001c5c                __vector_1
                0x00001c5c                __vector_12
                0x00001c5c                __bad_interrupt
                0x00001c5c                __vector_6
                0x00001c5c                __vector_3
                0x00001c5c                __vector_11
                0x00001c5c                __vector_13
                0x00001c5c                __vector_17
                0x00001c5c                __vector_7
                0x00001c5c                __vector_5
                0x00001c5c                __vector_4
                0x00001c5c                __vector_9
                0x00001c5c                __vector_2
                0x00001c5c                __vector_15
                0x00001c5c                __vector_8
                0x00001c5c                __vector_14
                0x00001c5c                __vector_10
                0x00001c5c                __vector_16
                0x00001c5c                __vector_18
 .text          0x00001c5e      0x35a ATmegaBOOT.o
                0x00001c5e                putch
                0x00001c66                getch
                0x00001cac                getNch
                0x00001cc4                byte_response
                0x00001cde                nothing_response
                0x00001cee                main
 .text          0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text          0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .text          0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 .text          0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
 .text          0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eewr_byte_atmega8.o)
                0x00001fb8                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x00001fb8        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x00001fb8       0x10 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
                0x00001fb8                __eerd_byte_m8
 .text.avr-libc
                0x00001fc8       0x1a /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eewr_byte_atmega8.o)
                0x00001fc8                __eewr_byte_m8
                0x00001fca                __eewr_r18_m8
                0x00001fe2                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00001fe2        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                0x00001fe2                exit
                0x00001fe2                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00001fe2        0x4 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00001fe6                _etext = .

.data           0x00800060        0x2 load address 0x00001fe6
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .data          0x00800060        0x1 ATmegaBOOT.o
                0x00800060                pagesz
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eewr_byte_atmega8.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800062                . = ALIGN (0x2)
 *fill*         0x00800061        0x1 00
                0x00800062                _edata = .
                0x00800062                PROVIDE (__data_end, .)

.bss            0x00800062      0x108
                0x00800062                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800062        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .bss           0x00800062        0x2 ATmegaBOOT.o
                0x00800062                app_start
 .bss           0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .bss           0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_copy_data.o)
 .bss           0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 .bss           0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
 .bss           0x00800064        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eewr_byte_atmega8.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800064      0x106 ATmegaBOOT.o
                0x00800064                address
                0x00800066                buff
                0x00800166                length
                0x00800168                i
                0x00800169                flags
                0x0080016a                PROVIDE (__bss_end, .)
                0x00001fe6                __data_load_start = LOADADDR (.data)
                0x00001fe8                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0080016a        0x0
                0x0080016a                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0080016a                PROVIDE (__noinit_end, .)
                0x0080016a                _end = .
                0x0080016a                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x141c
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o
 .stab          0x000006cc      0xbe8 ATmegaBOOT.o
                                0xbf4 (size before relaxing)
 .stab          0x000012b4       0x90 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
                                 0x9c (size before relaxing)
 .stab          0x00001344       0xd8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a(eewr_byte_atmega8.o)
                                 0xe4 (size before relaxing)

.stabstr        0x00000000      0xc40
 *(.stabstr)
 .stabstr       0x00000000      0xc40 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ATmegaBOOT.elf elf32-avr)
LOAD linker stubs
